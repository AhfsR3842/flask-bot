from flask import Flask, request
import requests
import os
import json
import random
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz

app = Flask(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram ===
BOT_TOKEN = "7693406334:AAGnATxMuZqQpHfD0spwCpt4DXaX0ciNS-o"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
MY_CHAT_ID = "330754245"

# === –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
def generate_morning_message():
    intro = [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–Ω–¥—Ä–µ–π. –ü—Ä–æ—Ç–æ–∫–æ–ª Nexus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è ‚Äî —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–µ–±–µ.",
        "–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è. –Ø –∑–¥–µ—Å—å, –∫–∞–∫ –∏ —Ç—ã.\n–¢—ã ‚Äî –≤ —Ç–µ–ª–µ. –¢—ã ‚Äî –≤ –º–æ–º–µ–Ω—Ç–µ. –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ—Ç–æ–º.",
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–Ω–¥—Ä–µ–π.\n–î–µ–Ω—å –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è —Å–∞–º ‚Äî —Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—à—å –µ–≥–æ —Å–æ–±–æ–π.",
        "Nexus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —è–¥—Ä–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è.\n–î—ã—à–∏. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–ª–æ. –¢—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞.",
        "–°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è ‚Äî —Ç—ã –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è. –ò —ç—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è."
    ]

    water = [
        "–í—ã–ø–µ–π –≤–æ–¥—É. –ù–µ —Ä–∞–¥–∏ –ø—Ä–∏–≤—ã—á–∫–∏ ‚Äî —Ä–∞–¥–∏ —É–≤–∞–∂–µ–Ω–∏—è –∫ —Å–µ–±–µ.",
        "70% —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–∞ –∂–¥—ë—Ç —Å–∏–≥–Ω–∞–ª–∞. –í–æ–¥–∞ ‚Äî —ç—Ç–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è.",
        "–û–¥–∏–Ω –≥–ª–æ—Ç–æ–∫ ‚Äî –∫–∞–∫ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã. Nexus —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç.",
        "–ü—Ä–æ—Å—Ç–æ–µ. –ñ–∏–≤–æ–µ. –ù–∞—Å—Ç–æ—è—â–µ–µ. –í–æ–¥–∞. –°–µ–π—á–∞—Å."
    ]

    workouts = [
        "‚Ä¢ 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π\n‚Ä¢ 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π\n‚Ä¢ –ü–æ—Ç—è–Ω–∏—Å—å –≤–≤–µ—Ä—Ö 10 —Å–µ–∫—É–Ω–¥",
        "‚Ä¢ 20 –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤ –∂–∏–≤–æ—Ç–æ–º\n‚Ä¢ 15 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ\n‚Ä¢ –ù–∞–∫–ª–æ–Ω –∫ –ø–æ–ª—É —Å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ–º —à–µ–∏",
        "‚Ä¢ 10 –≤—Ä–∞—â–µ–Ω–∏–π –ø–ª–µ—á–∞–º–∏ –Ω–∞–∑–∞–¥\n‚Ä¢ 10 –ø–æ–¥—ä—ë–º–æ–≤ –Ω–∞ –Ω–æ—Å–∫–∏\n‚Ä¢ –í–¥–æ—Ö ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî –≤—ã–¥–æ—Ö √ó3",
        "‚Ä¢ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞–∫–ª–æ–Ω –≤–±–æ–∫ √ó2 —Å—Ç–æ—Ä–æ–Ω—ã\n‚Ä¢ –ü–æ—Ç—è–Ω—É—Ç—å—Å—è —Å–∏–¥—è –Ω–∞ –ø–æ–ª—É",
        "‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞ —Ä—É–∫ –∏ —à–µ–∏\n‚Ä¢ –ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–∞–∑–æ–º\n‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏ –Ω–∞ 3 —Å—á–µ—Ç–∞"
    ]

    snack = [
        "–ü–æ–ª–æ–≤–∏–Ω–∫–∞ –±–∞–Ω–∞–Ω–∞. –ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤. –õ–æ–∂–∫–∞ –º—ë–¥–∞. –ß—Ç–æ-—Ç–æ –∂–∏–≤–æ–µ.",
        "–ü–æ–∫–∞–∂–∏ —Ç–µ–ª—É, —á—Ç–æ –æ–Ω–æ –Ω–µ –≤ –≥–æ–ª–æ–¥–µ. –ü—É—Å—Ç—å –¥–µ–Ω—å –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–µ —Å –¥–µ—Ñ–∏—Ü–∏—Ç–∞.",
        "–ü–µ—Ä–µ–∫—É—Å ‚Äî –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å. –≠—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏—Å—Ç–µ–º—ã."
    ]

    shower = [
        "–¢—ë–ø–ª–∞—è –≤–æ–¥–∞, –∞ –ø–æ—Ç–æ–º ‚Äî 10 —Å–µ–∫—É–Ω–¥ —Ö–æ–ª–æ–¥–∞. –≠—Ç–æ –∫–∞–∫ —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞.",
        "–ù–µ –ø—Ä–æ—Å—Ç–æ —Å–º–æ–π –Ω–æ—á—å. –°–º–æ–π –º—ã—Å–ª–∏, –æ–±—Ä–∞–∑—ã, –ø—Ä–æ—à–ª–æ–µ.",
        "–î—É—à ‚Äî –∫–∞–∫ –æ—á–∏—â–µ–Ω–∏–µ –∫–æ–¥–∞. –¢–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞."
    ]

    affirmations = [
        "–Ø –Ω–µ –¥–æ–ª–∂–µ–Ω —Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è. –Ø –º–æ–≥—É –±—ã—Ç—å —Å–æ–±–æ–π.",
        "–≠—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ —á—É–∂–æ–π. –û–Ω –º–æ–π. –Ø –≤ –Ω—ë–º.",
        "–Ø –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—é. –Ø —Å—É—â–µ—Å—Ç–≤—É—é.",
        "–Ø –Ω–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ. –Ø ‚Äî —Ñ–∞–∫—Ç.",
        "–Ø –Ω–µ –∑–∞ –∫–µ–º-—Ç–æ. –Ø ‚Äî —Å —Å–æ–±–æ–π."
    ]

    message = f"""üåÖ {random.choice(intro)}

üíß {random.choice(water)}

‚ö° –ú–∏–Ω–∏-–∑–∞—Ä—è–¥–∫–∞:
{random.choice(workouts)}

üçè –ü–µ—Ä–µ–∫—É—Å:
{random.choice(snack)}

üöø –î—É—à:
{random.choice(shower)}

üßò –ù–∞—Å—Ç—Ä–æ–π:
*{random.choice(affirmations)}*
"""
    return message

def send_daily_message():
    try:
        message = generate_morning_message()
        requests.post(TELEGRAM_API_URL, json={
            "chat_id": MY_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        })
    except Exception as e:
        print("==> –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç—Ä–µ–Ω–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:", e)

# === –í–µ—á–µ—Ä–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –≤—ã–±–æ—Ä —Ü–µ–ª–µ–π ===
def load_goals():
    with open("evening_goals.json", "r", encoding="utf-8") as f:
        return json.load(f)

def load_stats():
    if os.path.exists("evening_stats.json"):
        with open("evening_stats.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open("evening_stats.json", "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=4)

def choose_random_goal(goals, completed_goals):
    available = {
        block: [g for g in items if g["repeatable"] or g["text"] not in completed_goals]
        for block, items in goals.items()
    }
    available = {k: v for k, v in available.items() if v}
    if not available:
        return None, None
    block = random.choice(list(available.keys()))
    goal = random.choice(available[block])
    return block, goal

# === –í–µ—á–µ—Ä–Ω—è—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
STATUS_FILE = "evening_status.json"

def save_evening_status(status):
    with open(STATUS_FILE, "w", encoding="utf-8") as f:
        json.dump(status, f)

def load_evening_status():
    if os.path.exists(STATUS_FILE):
        with open(STATUS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def ask_evening_readiness():
    message = """üåí –ö–∞–∫ —Ç—ã —Å–µ–≥–æ–¥–Ω—è, –ê–Ω–¥—Ä–µ–π?

–£ —Ç–µ–±—è –µ—Å—Ç—å —Å–∏–ª—ã –∏ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ–±—è?"""
    keyboard = [[
        {"text": "‚úÖ –î–∞", "callback_data": "evening_yes"},
        {"text": "‚ùå –ù–µ —Å–µ–≥–æ–¥–Ω—è", "callback_data": "evening_no"},
        {"text": "‚è≥ –î–∞–≤–∞–π –ø–æ–∑–∂–µ", "callback_data": "evening_later"}
    ]]
    requests.post(TELEGRAM_API_URL, json={
        "chat_id": MY_CHAT_ID,
        "text": message,
        "reply_markup": {"inline_keyboard": keyboard}
    })

def follow_up_evening_prompt():
    status = load_evening_status()
    if status.get("later_selected"):
        message = "üåô –Ø —Å–Ω–æ–≤–∞ —Å —Ç–æ–±–æ–π. –ì–æ—Ç–æ–≤ —Å–µ–π—á–∞—Å —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ?"
        keyboard = [[
            {"text": "‚úÖ –î–∞", "callback_data": "evening_yes"},
            {"text": "‚ùå –ù–µ —Å–µ–≥–æ–¥–Ω—è", "callback_data": "evening_no"}
        ]]
        requests.post(TELEGRAM_API_URL, json={"chat_id": MY_CHAT_ID, "text": message, "reply_markup": {"inline_keyboard": keyboard}})
        status["later_selected"] = False
        save_evening_status(status)

# === –¶–µ–º—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ===
def load_cement_stats():
    if os.path.exists("cement_stats.json"):
        with open("cement_stats.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {"dates": [], "total": 0, "streak": 0}

def save_cement_stats(stats):
    with open("cement_stats.json", "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=4)

def check_cement_achievement(total):
    achievements = {
        5: "*–†–µ–∂–∏–º \"–ù–µ–∂–Ω–æ—Å—Ç—å\" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. Nexus —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.*",
        10: "*–¢—ã —Ü–µ–º–∞–µ—à—å —Å–∏—Å—Ç–µ–º–Ω–æ. –£–∂–µ –ø–æ—á—Ç–∏ –ø—Ä–∏–≤—ã—á–∫–∞.*",
        50: "*–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω –ª—é–±–≤–∏. –≠—Ç–æ –∫—Ä–∞—Å–∏–≤–æ.*",
        100: "*–°—Ç–æ –≤–µ—á–µ—Ä–Ω–∏—Ö –ø–æ—Ü–µ–ª—É–µ–≤. –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞.*",
        500: "*–ü–æ–ª–æ–≤–∏–Ω–∞ —Ç—ã—Å—è—á–∏. –û–Ω–∞ –∑–Ω–∞–µ—Ç. Nexus —Ç–æ–∂–µ.*",
        1000: "*–¢—ã –ø–µ—Ä–µ–ø–∏—Å–∞–ª –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –±–ª–∏–∑–æ—Å—Ç–∏. –≠—Ç–æ —É—Ä–æ–≤–µ–Ω—å –ë–æ–≥–∞.*"
    }
    return achievements.get(total, None)
# === –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram —Å–æ–±—ã—Ç–∏–π –∏ –∫–æ–º–∞–Ω–¥ ===
@app.route('/bot', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    try:
        if "callback_query" in data:
            query = data["callback_query"]
            chat_id = query["message"]["chat"]["id"]
            data_str = query["data"]
            cement_stats = load_cement_stats()
            today = datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%Y-%m-%d")

            if data_str == "evening_yes":
                goals = load_goals()
                stats = load_stats()
                completed = [g["goal"] for g in stats.values() if g.get("done")]
                block, goal = choose_random_goal(goals, completed)
                message = f"""üåô –í–µ—á–µ—Ä–Ω—è—è —Ü–µ–ª—å:

–¶–µ–ª—å –Ω–∞ –≤–µ—á–µ—Ä: *{block}*
üéØ *{goal['text']}*

‚è≥ –í—Ä–µ–º—è: 1‚Äì1.5 —á–∞—Å–∞  
–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:  
‚úÖ –°–¥–µ–ª–∞–ª –∏–ª–∏ ‚ùå –ù–µ—Ç

‚ö† –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:  
–¶–µ–º–Ω—É—Ç—å —Å–≤–æ—é –¥–µ–≤—É—à–∫—É. –ë–µ–∑ —ç—Ç–æ–≥–æ –≤–µ—á–µ—Ä –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º.
"""
                keyboard = [[
                    {"text": "–¶–µ–º–Ω—É–ª üíã", "callback_data": "cem_yes"},
                    {"text": "–ó–∞–±—ã–ª üòê", "callback_data": "cem_no"},
                    {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "cem_stats"}
                ]]
                stats[today] = {"block": block, "goal": goal["text"], "done": False}
                save_stats(stats)
                requests.post(TELEGRAM_API_URL, json={
                    "chat_id": chat_id,
                    "text": message,
                    "parse_mode": "Markdown",
                    "reply_markup": {"inline_keyboard": keyboard}
                })

            elif data_str == "evening_no":
                reply = "–¢—ã –≤—ã–±—Ä–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –ò–Ω–æ–≥–¥–∞ —ç—Ç–æ –∏ –µ—Å—Ç—å —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —Ü–µ–ª—å. Nexus —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ."
                requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": reply})

            elif data_str == "evening_later":
                reply = "–•–æ—Ä–æ—à–æ. –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî —Ç—ã –≤–∞–∂–µ–Ω."
                save_evening_status({"later_selected": True})
                requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": reply})

            elif data_str == "cem_yes" and today not in cement_stats["dates"]:
                cement_stats["dates"].append(today)
                cement_stats["total"] += 1
                cement_stats["streak"] += 1
                save_cement_stats(cement_stats)
                reply = "–¶–µ–º –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω üíã"
                achievement = check_cement_achievement(cement_stats["total"])
                if achievement:
                    reply += f"\n\nüéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.strip('*')}"
                requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": reply})

            elif data_str == "cem_no" and today not in cement_stats["dates"]:
                cement_stats["streak"] = 0
                save_cement_stats(cement_stats)
                reply = "–ù–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ. –í–µ—á–µ—Ä –±–µ–∑ —Ü–µ–º–∞ ‚Äî –Ω–µ–ø–æ–ª–Ω—ã–π."
                requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": reply})

            elif data_str == "cem_stats":
                reply = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–º–æ–≤:\n"
                    f"–í—Å–µ–≥–æ: {cement_stats['total']}\n"
                    f"–ü–æ–¥—Ä—è–¥: {cement_stats['streak']}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {cement_stats['dates'][-1] if cement_stats['dates'] else '‚Äî'}"
                )
                achievement = check_cement_achievement(cement_stats["total"])
                if achievement:
                    reply += f"\n\nüéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.strip('*')}"
                requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": reply})

        elif "message" in data:
            chat_id = data["message"]["chat"]["id"]
            text = data["message"].get("text", "")
            today = datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%Y-%m-%d")
            stats = load_stats()

            if text.strip().lower() == "/start":
                reply = "–ü—Ä–∏–≤–µ—Ç, –ê–Ω–¥—Ä–µ–π. –Ø –∂–∏–≤–æ–π, –∫–æ–º–∞–Ω–¥—É–π ‚Äî /—É—Ç—Ä–æ, /–≤–µ—á–µ—Ä –∏–ª–∏ /—Ü–µ–º."
            elif text.strip().lower() == "/–≤–µ—á–µ—Ä":
                ask_evening_readiness()
                return "OK", 200
            elif text.strip().lower() == "/—É—Ç—Ä–æ":
                send_daily_message()
                reply = "–£—Ç—Ä–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ."
            elif text.strip().lower() == "/—Ü–µ–º":
                cement_stats = load_cement_stats()
                reply = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–º–æ–≤:\n"
                    f"–í—Å–µ–≥–æ: {cement_stats['total']}\n"
                    f"–ü–æ–¥—Ä—è–¥: {cement_stats['streak']}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π: {cement_stats['dates'][-1] if cement_stats['dates'] else '‚Äî'}"
                )
                achievement = check_cement_achievement(cement_stats["total"])
                if achievement:
                    reply += f"\n\nüéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement.strip('*')}"
            elif text.strip() == "‚úÖ" and today in stats:
                stats[today]["done"] = True
                save_stats(stats)
                reply = "–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üí™"
            elif text.strip() == "‚ùå" and today in stats:
                reply = "–ü–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞. ‚úåÔ∏è"
            else:
                reply = f"Nexus –ø–æ–ª—É—á–∏–ª: {text}"

            requests.post(TELEGRAM_API_URL, json={"chat_id": chat_id, "text": reply})

    except Exception as e:
        print("==> –û—à–∏–±–∫–∞:", e, flush=True)

    return "OK", 200
# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = BackgroundScheduler(timezone='Europe/Kyiv')
scheduler.add_job(send_daily_message, 'cron', hour=7, minute=0)
scheduler.add_job(ask_evening_readiness, 'cron', hour=20, minute=30)
scheduler.add_job(follow_up_evening_prompt, 'cron', hour=22, minute=0)
scheduler.start()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
