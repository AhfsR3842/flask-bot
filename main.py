from flask import Flask, request
import requests
import os
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import pytz
import random
import json

app = Flask(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram ===
BOT_TOKEN = "7693406334:AAEjWcw4rt7hUHGwnUN9z5uGR7ePY_Zi0qY"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
MY_CHAT_ID = "330754245"

# === –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
def generate_morning_message():
    intro = [
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–Ω–¥—Ä–µ–π. –ü—Ä–æ—Ç–æ–∫–æ–ª Nexus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–Ω—É–ª—Å—è ‚Äî —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–µ–±–µ.",
        "–í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è. –Ø –∑–¥–µ—Å—å, –∫–∞–∫ –∏ —Ç—ã.\n–¢—ã ‚Äî –≤ —Ç–µ–ª–µ. –¢—ã ‚Äî –≤ –º–æ–º–µ–Ω—Ç–µ. –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ—Ç–æ–º.",
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–Ω–¥—Ä–µ–π.\n–î–µ–Ω—å –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è —Å–∞–º ‚Äî —Ç—ã –∑–∞–ø—É—Å–∫–∞–µ—à—å –µ–≥–æ —Å–æ–±–æ–π.",
        "Nexus –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —è–¥—Ä–æ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è.\n–î—ã—à–∏. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–ª–æ. –¢—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞.",
        "–°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –ø—Ä–æ—Å–Ω—É–ª—Å—è ‚Äî —Ç—ã –≤—ã–±—Ä–∞–ª –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è. –ò —ç—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è."
    ]

    water = [
        "–í—ã–ø–µ–π –≤–æ–¥—É. –ù–µ —Ä–∞–¥–∏ –ø—Ä–∏–≤—ã—á–∫–∏ ‚Äî —Ä–∞–¥–∏ —É–≤–∞–∂–µ–Ω–∏—è –∫ —Å–µ–±–µ.",
        "70% —Ç–≤–æ–µ–≥–æ —Ç–µ–ª–∞ –∂–¥—ë—Ç —Å–∏–≥–Ω–∞–ª–∞. –í–æ–¥–∞ ‚Äî —ç—Ç–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è.",
        "–û–¥–∏–Ω –≥–ª–æ—Ç–æ–∫ ‚Äî –∫–∞–∫ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã. Nexus —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç.",
        "–ü—Ä–æ—Å—Ç–æ–µ. –ñ–∏–≤–æ–µ. –ù–∞—Å—Ç–æ—è—â–µ–µ. –í–æ–¥–∞. –°–µ–π—á–∞—Å."
    ]

    workouts = [
        "‚Ä¢ 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π\n‚Ä¢ 5 –æ—Ç–∂–∏–º–∞–Ω–∏–π\n‚Ä¢ –ü–æ—Ç—è–Ω–∏—Å—å –≤–≤–µ—Ä—Ö 10 —Å–µ–∫—É–Ω–¥",
        "‚Ä¢ 20 –≤–¥–æ—Ö–æ–≤ –∏ –≤—ã–¥–æ—Ö–æ–≤ –∂–∏–≤–æ—Ç–æ–º\n‚Ä¢ 15 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ\n‚Ä¢ –ù–∞–∫–ª–æ–Ω –∫ –ø–æ–ª—É —Å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ–º —à–µ–∏",
        "‚Ä¢ 10 –≤—Ä–∞—â–µ–Ω–∏–π –ø–ª–µ—á–∞–º–∏ –Ω–∞–∑–∞–¥\n‚Ä¢ 10 –ø–æ–¥—ä—ë–º–æ–≤ –Ω–∞ –Ω–æ—Å–∫–∏\n‚Ä¢ –í–¥–æ—Ö ‚Äî –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî –≤—ã–¥–æ—Ö √ó3",
        "‚Ä¢ –ü–ª–∞–Ω–∫–∞ ‚Äî 30 —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –Ω–∞–∫–ª–æ–Ω –≤–±–æ–∫ √ó2 —Å—Ç–æ—Ä–æ–Ω—ã\n‚Ä¢ –ü–æ—Ç—è–Ω—É—Ç—å—Å—è —Å–∏–¥—è –Ω–∞ –ø–æ–ª—É"
    ]

    snack = [
        "–ü–æ–ª–æ–≤–∏–Ω–∫–∞ –±–∞–Ω–∞–Ω–∞. –ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤. –õ–æ–∂–∫–∞ –º—ë–¥–∞. –ß—Ç–æ-—Ç–æ –∂–∏–≤–æ–µ.",
        "–ü–æ–∫–∞–∂–∏ —Ç–µ–ª—É, —á—Ç–æ –æ–Ω–æ –Ω–µ –≤ –≥–æ–ª–æ–¥–µ. –ü—É—Å—Ç—å –¥–µ–Ω—å –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–µ —Å –¥–µ—Ñ–∏—Ü–∏—Ç–∞.",
        "–ü–µ—Ä–µ–∫—É—Å ‚Äî –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å. –≠—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏—Å—Ç–µ–º—ã."
    ]

    shower = [
        "–¢—ë–ø–ª–∞—è –≤–æ–¥–∞, –∞ –ø–æ—Ç–æ–º ‚Äî 10 —Å–µ–∫—É–Ω–¥ —Ö–æ–ª–æ–¥–∞. –≠—Ç–æ –∫–∞–∫ —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞.",
        "–ù–µ –ø—Ä–æ—Å—Ç–æ —Å–º–æ–π –Ω–æ—á—å. –°–º–æ–π –º—ã—Å–ª–∏, –æ–±—Ä–∞–∑—ã, –ø—Ä–æ—à–ª–æ–µ.",
        "–î—É—à ‚Äî –∫–∞–∫ –æ—á–∏—â–µ–Ω–∏–µ –∫–æ–¥–∞. –¢–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞."
    ]

    affirmations = [
        "–Ø –Ω–µ –¥–æ–ª–∂–µ–Ω —Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è. –Ø –º–æ–≥—É –±—ã—Ç—å —Å–æ–±–æ–π.",
        "–≠—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ —á—É–∂–æ–π. –û–Ω –º–æ–π. –Ø –≤ –Ω—ë–º.",
        "–Ø –Ω–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—é. –Ø —Å—É—â–µ—Å—Ç–≤—É—é.",
        "–Ø –Ω–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ. –Ø ‚Äî —Ñ–∞–∫—Ç.",
        "–Ø –Ω–µ –∑–∞ –∫–µ–º-—Ç–æ. –Ø ‚Äî —Å —Å–æ–±–æ–π."
    ]

    message = f"""üåÖ {random.choice(intro)}

üíß {random.choice(water)}

‚ö° –ú–∏–Ω–∏-–∑–∞—Ä—è–¥–∫–∞:
{random.choice(workouts)}

üçè –ü–µ—Ä–µ–∫—É—Å:
{random.choice(snack)}

üöø –î—É—à:
{random.choice(shower)}

üßò –ù–∞—Å—Ç—Ä–æ–π:
*{random.choice(affirmations)}*
"""
    return message

# === –í–µ—á–µ—Ä–Ω—è—è –ª–æ–≥–∏–∫–∞ ===
def load_goals():
    with open("evening_goals.json", "r", encoding="utf-8") as f:
        return json.load(f)

def load_stats():
    if os.path.exists("evening_stats.json"):
        with open("evening_stats.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open("evening_stats.json", "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=4)

def choose_random_goal(goals, completed_goals):
    available = {
        block: [
            g for g in items if g["repeatable"] or g["text"] not in completed_goals
        ]
        for block, items in goals.items()
    }
    available = {k: v for k, v in available.items() if v}
    if not available:
        return None, None
    block = random.choice(list(available.keys()))
    goal = random.choice(available[block])
    return block, goal

def send_daily_message():
    try:
        message = generate_morning_message()
        print("==> –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è", flush=True)

        requests.post(TELEGRAM_API_URL, json={
            "chat_id": MY_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        })

    except Exception as e:
        print("==> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", e, flush=True)

def send_evening_goal():
    try:
        goals = load_goals()
        stats = load_stats()
        today = datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%Y-%m-%d")

        completed = [g["goal"] for g in stats.values() if g.get("done")]
        block, goal = choose_random_goal(goals, completed)

        if not goal:
            message = "–í—Å–µ —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞–π üòå"
        else:
            message = f"""üåô –í–µ—á–µ—Ä–Ω—è—è —Ü–µ–ª—å: *{block}*

üéØ *{goal['text']}*

‚è≥ –í—Ä–µ–º—è: 1‚Äì1.5 —á–∞—Å–∞  
–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:  
‚úÖ –°–¥–µ–ª–∞–ª –∏–ª–∏ ‚ùå –ù–µ—Ç
"""
            stats[today] = {
                "block": block,
                "goal": goal["text"],
                "done": False
            }
            save_stats(stats)

        requests.post(TELEGRAM_API_URL, json={
            "chat_id": MY_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        })

    except Exception as e:
        print("==> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–µ—á–µ—Ä–Ω–µ–π —Ü–µ–ª–∏:", e, flush=True)

@app.route('/bot', methods=['POST'])
def telegram_webhook():
    data = request.get_json()
    print("==> –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data, flush=True)

    try:
        if "message" in data:
            chat_id = data["message"]["chat"]["id"]
            text = data["message"].get("text", "")

            if text.strip().lower() == "/—É—Ç—Ä–æ":
                send_daily_message()
                return "OK", 200

            if text.strip().lower() == "/–≤–µ—á–µ—Ä":
                send_evening_goal()
                return "OK", 200

            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (‚úÖ / ‚ùå –∏ —Ç.–¥.)
            reply = f"–ê–ª–µ–∫—Å –ø–æ–ª—É—á–∏–ª: {text}"
            requests.post(TELEGRAM_API_URL, json={
                "chat_id": chat_id,
                "text": reply
            })

    except Exception as e:
        print("==> –û—à–∏–±–∫–∞:", e, flush=True)

    return "OK", 200
      
            stats = load_stats()
            today = datetime.now(pytz.timezone("Europe/Kyiv")).strftime("%Y-%m-%d")

            if today in stats and text.strip() in ["‚úÖ", "‚ùå"]:
                stats[today]["done"] = text.strip() == "‚úÖ"
                save_stats(stats)
                reply = "–û—Ç–ª–∏—á–Ω–æ, —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üî•" if text.strip() == "‚úÖ" else "–•–æ—Ä–æ—à–æ, –ø—Ä–µ–¥–ª–æ–∂—É —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ ‚úåÔ∏è"
            else:
                reply = f"–ê–ª–µ–∫—Å –ø–æ–ª—É—á–∏–ª: {text}"

            requests.post(TELEGRAM_API_URL, json={
                "chat_id": chat_id,
                "text": reply
            })

    except Exception as e:
        print("==> –û—à–∏–±–∫–∞:", e, flush=True)

    return "OK", 200

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è) ===
scheduler = BackgroundScheduler(timezone='Europe/Kyiv')
scheduler.add_job(send_daily_message, 'cron', hour=7, minute=0)
scheduler.add_job(send_evening_goal, 'cron', hour=21, minute=0)
scheduler.start()

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
